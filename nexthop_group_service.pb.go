//*********************************************************************************************************************
//  Description: Interface between SDK service manager and Next Hop Group agent
//
//  Copyright (c) 2018 Nokia
//*********************************************************************************************************************

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.20.1
// 	protoc        v3.7.1
// source: nexthop_group_service.proto

package protos

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

///  Represents resolve-to type.
type NextHop_ResolveToType int32

const (
	NextHop_LOCAL    NextHop_ResolveToType = 0 // Resolve to local routes
	NextHop_DIRECT   NextHop_ResolveToType = 1 // Resolve to direct routes
	NextHop_INDIRECT NextHop_ResolveToType = 2 // Resolve to indirect routes
)

// Enum value maps for NextHop_ResolveToType.
var (
	NextHop_ResolveToType_name = map[int32]string{
		0: "LOCAL",
		1: "DIRECT",
		2: "INDIRECT",
	}
	NextHop_ResolveToType_value = map[string]int32{
		"LOCAL":    0,
		"DIRECT":   1,
		"INDIRECT": 2,
	}
)

func (x NextHop_ResolveToType) Enum() *NextHop_ResolveToType {
	p := new(NextHop_ResolveToType)
	*p = x
	return p
}

func (x NextHop_ResolveToType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NextHop_ResolveToType) Descriptor() protoreflect.EnumDescriptor {
	return file_nexthop_group_service_proto_enumTypes[0].Descriptor()
}

func (NextHop_ResolveToType) Type() protoreflect.EnumType {
	return &file_nexthop_group_service_proto_enumTypes[0]
}

func (x NextHop_ResolveToType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NextHop_ResolveToType.Descriptor instead.
func (NextHop_ResolveToType) EnumDescriptor() ([]byte, []int) {
	return file_nexthop_group_service_proto_rawDescGZIP(), []int{5, 0}
}

/// Represents resolution type.
type NextHop_ResolutionType int32

const (
	NextHop_INVALID NextHop_ResolutionType = 0 // Invalid resolution
	NextHop_REGULAR NextHop_ResolutionType = 1 // Regular resolution
	NextHop_MPLS    NextHop_ResolutionType = 2 // MPLS resolution
)

// Enum value maps for NextHop_ResolutionType.
var (
	NextHop_ResolutionType_name = map[int32]string{
		0: "INVALID",
		1: "REGULAR",
		2: "MPLS",
	}
	NextHop_ResolutionType_value = map[string]int32{
		"INVALID": 0,
		"REGULAR": 1,
		"MPLS":    2,
	}
)

func (x NextHop_ResolutionType) Enum() *NextHop_ResolutionType {
	p := new(NextHop_ResolutionType)
	*p = x
	return p
}

func (x NextHop_ResolutionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NextHop_ResolutionType) Descriptor() protoreflect.EnumDescriptor {
	return file_nexthop_group_service_proto_enumTypes[1].Descriptor()
}

func (NextHop_ResolutionType) Type() protoreflect.EnumType {
	return &file_nexthop_group_service_proto_enumTypes[1]
}

func (x NextHop_ResolutionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NextHop_ResolutionType.Descriptor instead.
func (NextHop_ResolutionType) EnumDescriptor() ([]byte, []int) {
	return file_nexthop_group_service_proto_rawDescGZIP(), []int{5, 1}
}

//*
// Represents next-hop group delete request.
type NextHopGroupDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupKey []*NextHopGroupKey `protobuf:"bytes,1,rep,name=group_key,json=groupKey,proto3" json:"group_key,omitempty"` // Next-hop group key details
}

func (x *NextHopGroupDeleteRequest) Reset() {
	*x = NextHopGroupDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nexthop_group_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NextHopGroupDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NextHopGroupDeleteRequest) ProtoMessage() {}

func (x *NextHopGroupDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nexthop_group_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NextHopGroupDeleteRequest.ProtoReflect.Descriptor instead.
func (*NextHopGroupDeleteRequest) Descriptor() ([]byte, []int) {
	return file_nexthop_group_service_proto_rawDescGZIP(), []int{0}
}

func (x *NextHopGroupDeleteRequest) GetGroupKey() []*NextHopGroupKey {
	if x != nil {
		return x.GroupKey
	}
	return nil
}

//*
// Represents next-hop group delete response.
type NextHopGroupDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   SdkMgrStatus `protobuf:"varint,1,opt,name=status,proto3,enum=srlinux.sdk.SdkMgrStatus" json:"status,omitempty"` // Response for next-hop group request
	ErrorStr string       `protobuf:"bytes,2,opt,name=error_str,json=errorStr,proto3" json:"error_str,omitempty"`            // Detailed error string
}

func (x *NextHopGroupDeleteResponse) Reset() {
	*x = NextHopGroupDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nexthop_group_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NextHopGroupDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NextHopGroupDeleteResponse) ProtoMessage() {}

func (x *NextHopGroupDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nexthop_group_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NextHopGroupDeleteResponse.ProtoReflect.Descriptor instead.
func (*NextHopGroupDeleteResponse) Descriptor() ([]byte, []int) {
	return file_nexthop_group_service_proto_rawDescGZIP(), []int{1}
}

func (x *NextHopGroupDeleteResponse) GetStatus() SdkMgrStatus {
	if x != nil {
		return x.Status
	}
	return SdkMgrStatus_kSdkMgrSuccess
}

func (x *NextHopGroupDeleteResponse) GetErrorStr() string {
	if x != nil {
		return x.ErrorStr
	}
	return ""
}

//*
// Represents next-hop group request.
type NextHopGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupInfo []*NextHopGroupInfo `protobuf:"bytes,1,rep,name=group_info,json=groupInfo,proto3" json:"group_info,omitempty"` // Next-hop group details
}

func (x *NextHopGroupRequest) Reset() {
	*x = NextHopGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nexthop_group_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NextHopGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NextHopGroupRequest) ProtoMessage() {}

func (x *NextHopGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nexthop_group_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NextHopGroupRequest.ProtoReflect.Descriptor instead.
func (*NextHopGroupRequest) Descriptor() ([]byte, []int) {
	return file_nexthop_group_service_proto_rawDescGZIP(), []int{2}
}

func (x *NextHopGroupRequest) GetGroupInfo() []*NextHopGroupInfo {
	if x != nil {
		return x.GroupInfo
	}
	return nil
}

//*
// Represents next-hop group response.
type NextHopGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status   SdkMgrStatus `protobuf:"varint,1,opt,name=status,proto3,enum=srlinux.sdk.SdkMgrStatus" json:"status,omitempty"` // Response for next-hop group request
	ErrorStr string       `protobuf:"bytes,2,opt,name=error_str,json=errorStr,proto3" json:"error_str,omitempty"`            // Detailed error string
}

func (x *NextHopGroupResponse) Reset() {
	*x = NextHopGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nexthop_group_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NextHopGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NextHopGroupResponse) ProtoMessage() {}

func (x *NextHopGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nexthop_group_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NextHopGroupResponse.ProtoReflect.Descriptor instead.
func (*NextHopGroupResponse) Descriptor() ([]byte, []int) {
	return file_nexthop_group_service_proto_rawDescGZIP(), []int{3}
}

func (x *NextHopGroupResponse) GetStatus() SdkMgrStatus {
	if x != nil {
		return x.Status
	}
	return SdkMgrStatus_kSdkMgrSuccess
}

func (x *NextHopGroupResponse) GetErrorStr() string {
	if x != nil {
		return x.ErrorStr
	}
	return ""
}

//*
// Represents MPLS next hop.
type MplsNextHop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpNexthop  *IpAddressPb `protobuf:"bytes,1,opt,name=ip_nexthop,json=ipNexthop,proto3" json:"ip_nexthop,omitempty"`    // Next-hop IP address
	LabelStack []*MplsLabel `protobuf:"bytes,2,rep,name=label_stack,json=labelStack,proto3" json:"label_stack,omitempty"` // MPLS label stack
}

func (x *MplsNextHop) Reset() {
	*x = MplsNextHop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nexthop_group_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MplsNextHop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MplsNextHop) ProtoMessage() {}

func (x *MplsNextHop) ProtoReflect() protoreflect.Message {
	mi := &file_nexthop_group_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MplsNextHop.ProtoReflect.Descriptor instead.
func (*MplsNextHop) Descriptor() ([]byte, []int) {
	return file_nexthop_group_service_proto_rawDescGZIP(), []int{4}
}

func (x *MplsNextHop) GetIpNexthop() *IpAddressPb {
	if x != nil {
		return x.IpNexthop
	}
	return nil
}

func (x *MplsNextHop) GetLabelStack() []*MplsLabel {
	if x != nil {
		return x.LabelStack
	}
	return nil
}

//*
// Represents next-hop.
type NextHop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResolveTo NextHop_ResolveToType  `protobuf:"varint,1,opt,name=resolve_to,json=resolveTo,proto3,enum=srlinux.sdk.NextHop_ResolveToType" json:"resolve_to,omitempty"` // Resolve-to type
	Type      NextHop_ResolutionType `protobuf:"varint,2,opt,name=type,proto3,enum=srlinux.sdk.NextHop_ResolutionType" json:"type,omitempty"`                           // Resolution type
	// Types that are assignable to Nexthop:
	//	*NextHop_IpNexthop
	//	*NextHop_MplsNexthop
	Nexthop isNextHop_Nexthop `protobuf_oneof:"nexthop"`
}

func (x *NextHop) Reset() {
	*x = NextHop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nexthop_group_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NextHop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NextHop) ProtoMessage() {}

func (x *NextHop) ProtoReflect() protoreflect.Message {
	mi := &file_nexthop_group_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NextHop.ProtoReflect.Descriptor instead.
func (*NextHop) Descriptor() ([]byte, []int) {
	return file_nexthop_group_service_proto_rawDescGZIP(), []int{5}
}

func (x *NextHop) GetResolveTo() NextHop_ResolveToType {
	if x != nil {
		return x.ResolveTo
	}
	return NextHop_LOCAL
}

func (x *NextHop) GetType() NextHop_ResolutionType {
	if x != nil {
		return x.Type
	}
	return NextHop_INVALID
}

func (m *NextHop) GetNexthop() isNextHop_Nexthop {
	if m != nil {
		return m.Nexthop
	}
	return nil
}

func (x *NextHop) GetIpNexthop() *IpAddressPb {
	if x, ok := x.GetNexthop().(*NextHop_IpNexthop); ok {
		return x.IpNexthop
	}
	return nil
}

func (x *NextHop) GetMplsNexthop() *MplsNextHop {
	if x, ok := x.GetNexthop().(*NextHop_MplsNexthop); ok {
		return x.MplsNexthop
	}
	return nil
}

type isNextHop_Nexthop interface {
	isNextHop_Nexthop()
}

type NextHop_IpNexthop struct {
	IpNexthop *IpAddressPb `protobuf:"bytes,3,opt,name=ip_nexthop,json=ipNexthop,proto3,oneof"` // IP next-hop address
}

type NextHop_MplsNexthop struct {
	MplsNexthop *MplsNextHop `protobuf:"bytes,4,opt,name=mpls_nexthop,json=mplsNexthop,proto3,oneof"` // MPLS next-hop
}

func (*NextHop_IpNexthop) isNextHop_Nexthop() {}

func (*NextHop_MplsNexthop) isNextHop_Nexthop() {}

//*
// Represents next-hop group.
type NextHopGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NextHop []*NextHop `protobuf:"bytes,1,rep,name=next_hop,json=nextHop,proto3" json:"next_hop,omitempty"` // Next-hops
}

func (x *NextHopGroup) Reset() {
	*x = NextHopGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nexthop_group_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NextHopGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NextHopGroup) ProtoMessage() {}

func (x *NextHopGroup) ProtoReflect() protoreflect.Message {
	mi := &file_nexthop_group_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NextHopGroup.ProtoReflect.Descriptor instead.
func (*NextHopGroup) Descriptor() ([]byte, []int) {
	return file_nexthop_group_service_proto_rawDescGZIP(), []int{6}
}

func (x *NextHopGroup) GetNextHop() []*NextHop {
	if x != nil {
		return x.NextHop
	}
	return nil
}

//*
// Represents next-hop group key.
type NextHopGroupKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                                            // Next-hop group name
	NetworkInstanceName string `protobuf:"bytes,2,opt,name=network_instance_name,json=networkInstanceName,proto3" json:"network_instance_name,omitempty"` // Next-hop group network instance name
}

func (x *NextHopGroupKey) Reset() {
	*x = NextHopGroupKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nexthop_group_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NextHopGroupKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NextHopGroupKey) ProtoMessage() {}

func (x *NextHopGroupKey) ProtoReflect() protoreflect.Message {
	mi := &file_nexthop_group_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NextHopGroupKey.ProtoReflect.Descriptor instead.
func (*NextHopGroupKey) Descriptor() ([]byte, []int) {
	return file_nexthop_group_service_proto_rawDescGZIP(), []int{7}
}

func (x *NextHopGroupKey) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NextHopGroupKey) GetNetworkInstanceName() string {
	if x != nil {
		return x.NetworkInstanceName
	}
	return ""
}

//*
// Represents next-hop group information.
type NextHopGroupInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key  *NextHopGroupKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`   // Next-hop group key
	Data *NextHopGroup    `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"` // Next-hop group data
}

func (x *NextHopGroupInfo) Reset() {
	*x = NextHopGroupInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nexthop_group_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NextHopGroupInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NextHopGroupInfo) ProtoMessage() {}

func (x *NextHopGroupInfo) ProtoReflect() protoreflect.Message {
	mi := &file_nexthop_group_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NextHopGroupInfo.ProtoReflect.Descriptor instead.
func (*NextHopGroupInfo) Descriptor() ([]byte, []int) {
	return file_nexthop_group_service_proto_rawDescGZIP(), []int{8}
}

func (x *NextHopGroupInfo) GetKey() *NextHopGroupKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *NextHopGroupInfo) GetData() *NextHopGroup {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_nexthop_group_service_proto protoreflect.FileDescriptor

var file_nexthop_group_service_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x73,
	0x72, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x2e, 0x73, 0x64, 0x6b, 0x1a, 0x10, 0x73, 0x64, 0x6b, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x56, 0x0a, 0x19,
	0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x09, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73,
	0x72, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x48,
	0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x4b, 0x65, 0x79, 0x22, 0x6c, 0x0a, 0x1a, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x19, 0x2e, 0x73, 0x72, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x2e, 0x73, 0x64, 0x6b,
	0x2e, 0x53, 0x64, 0x6b, 0x4d, 0x67, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x73,
	0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x53,
	0x74, 0x72, 0x22, 0x53, 0x0a, 0x13, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x0a, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x73, 0x72, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x4e, 0x65, 0x78, 0x74,
	0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x66, 0x0a, 0x14, 0x4e, 0x65, 0x78, 0x74, 0x48,
	0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x19, 0x2e, 0x73, 0x72, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x53, 0x64,
	0x6b, 0x4d, 0x67, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x72, 0x22,
	0x7f, 0x0a, 0x0b, 0x4d, 0x70, 0x6c, 0x73, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x12, 0x37,
	0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x72, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x2e, 0x73, 0x64, 0x6b,
	0x2e, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x62, 0x52, 0x09, 0x69, 0x70,
	0x4e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x12, 0x37, 0x0a, 0x0b, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x73,
	0x72, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x52, 0x0a, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x63, 0x6b,
	0x22, 0xf6, 0x02, 0x0a, 0x07, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x12, 0x41, 0x0a, 0x0a,
	0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x5f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x22, 0x2e, 0x73, 0x72, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x4e,
	0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x54, 0x6f,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x54, 0x6f, 0x12,
	0x37, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e,
	0x73, 0x72, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x4e, 0x65, 0x78, 0x74,
	0x48, 0x6f, 0x70, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x6e,
	0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73,
	0x72, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x49, 0x70, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x50, 0x62, 0x48, 0x00, 0x52, 0x09, 0x69, 0x70, 0x4e, 0x65, 0x78, 0x74,
	0x68, 0x6f, 0x70, 0x12, 0x3d, 0x0a, 0x0c, 0x6d, 0x70, 0x6c, 0x73, 0x5f, 0x6e, 0x65, 0x78, 0x74,
	0x68, 0x6f, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x72, 0x6c, 0x69,
	0x6e, 0x75, 0x78, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x4d, 0x70, 0x6c, 0x73, 0x4e, 0x65, 0x78, 0x74,
	0x48, 0x6f, 0x70, 0x48, 0x00, 0x52, 0x0b, 0x6d, 0x70, 0x6c, 0x73, 0x4e, 0x65, 0x78, 0x74, 0x68,
	0x6f, 0x70, 0x22, 0x34, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x54, 0x6f, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e,
	0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x10, 0x02, 0x22, 0x34, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x47, 0x55, 0x4c,
	0x41, 0x52, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x50, 0x4c, 0x53, 0x10, 0x02, 0x42, 0x09,
	0x0a, 0x07, 0x6e, 0x65, 0x78, 0x74, 0x68, 0x6f, 0x70, 0x22, 0x3f, 0x0a, 0x0c, 0x4e, 0x65, 0x78,
	0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2f, 0x0a, 0x08, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x68, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x72,
	0x6c, 0x69, 0x6e, 0x75, 0x78, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f,
	0x70, 0x52, 0x07, 0x6e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x22, 0x59, 0x0a, 0x0f, 0x4e, 0x65,
	0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x32, 0x0a, 0x15, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x71, 0x0a, 0x10, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x72, 0x6c, 0x69, 0x6e, 0x75, 0x78,
	0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x72, 0x6c, 0x69, 0x6e, 0x75,
	0x78, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0xec, 0x02, 0x0a, 0x19, 0x53, 0x64, 0x6b,
	0x4d, 0x67, 0x72, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x60, 0x0a, 0x17, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f,
	0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x64, 0x64, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x20, 0x2e, 0x73, 0x72, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x2e, 0x73, 0x64, 0x6b, 0x2e,
	0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x73, 0x72, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x2e, 0x73, 0x64,
	0x6b, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x12, 0x4e, 0x65, 0x78, 0x74,
	0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x26,
	0x2e, 0x73, 0x72, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x4e, 0x65, 0x78,
	0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x73, 0x72, 0x6c, 0x69, 0x6e, 0x75, 0x78,
	0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x42, 0x0a, 0x09, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x18,
	0x2e, 0x73, 0x72, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x53, 0x79, 0x6e,
	0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x73, 0x72, 0x6c, 0x69, 0x6e,
	0x75, 0x78, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x07, 0x53, 0x79, 0x6e, 0x63, 0x45, 0x6e, 0x64,
	0x12, 0x18, 0x2e, 0x73, 0x72, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x53,
	0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x73, 0x72, 0x6c,
	0x69, 0x6e, 0x75, 0x78, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x1e, 0x5a, 0x1c, 0x6e, 0x6f, 0x6b, 0x69, 0x61,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x72, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x2f, 0x73, 0x64, 0x6b,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_nexthop_group_service_proto_rawDescOnce sync.Once
	file_nexthop_group_service_proto_rawDescData = file_nexthop_group_service_proto_rawDesc
)

func file_nexthop_group_service_proto_rawDescGZIP() []byte {
	file_nexthop_group_service_proto_rawDescOnce.Do(func() {
		file_nexthop_group_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_nexthop_group_service_proto_rawDescData)
	})
	return file_nexthop_group_service_proto_rawDescData
}

var file_nexthop_group_service_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_nexthop_group_service_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_nexthop_group_service_proto_goTypes = []interface{}{
	(NextHop_ResolveToType)(0),         // 0: srlinux.sdk.NextHop.ResolveToType
	(NextHop_ResolutionType)(0),        // 1: srlinux.sdk.NextHop.ResolutionType
	(*NextHopGroupDeleteRequest)(nil),  // 2: srlinux.sdk.NextHopGroupDeleteRequest
	(*NextHopGroupDeleteResponse)(nil), // 3: srlinux.sdk.NextHopGroupDeleteResponse
	(*NextHopGroupRequest)(nil),        // 4: srlinux.sdk.NextHopGroupRequest
	(*NextHopGroupResponse)(nil),       // 5: srlinux.sdk.NextHopGroupResponse
	(*MplsNextHop)(nil),                // 6: srlinux.sdk.MplsNextHop
	(*NextHop)(nil),                    // 7: srlinux.sdk.NextHop
	(*NextHopGroup)(nil),               // 8: srlinux.sdk.NextHopGroup
	(*NextHopGroupKey)(nil),            // 9: srlinux.sdk.NextHopGroupKey
	(*NextHopGroupInfo)(nil),           // 10: srlinux.sdk.NextHopGroupInfo
	(SdkMgrStatus)(0),                  // 11: srlinux.sdk.SdkMgrStatus
	(*IpAddressPb)(nil),                // 12: srlinux.sdk.IpAddressPb
	(*MplsLabel)(nil),                  // 13: srlinux.sdk.MplsLabel
	(*SyncRequest)(nil),                // 14: srlinux.sdk.SyncRequest
	(*SyncResponse)(nil),               // 15: srlinux.sdk.SyncResponse
}
var file_nexthop_group_service_proto_depIdxs = []int32{
	9,  // 0: srlinux.sdk.NextHopGroupDeleteRequest.group_key:type_name -> srlinux.sdk.NextHopGroupKey
	11, // 1: srlinux.sdk.NextHopGroupDeleteResponse.status:type_name -> srlinux.sdk.SdkMgrStatus
	10, // 2: srlinux.sdk.NextHopGroupRequest.group_info:type_name -> srlinux.sdk.NextHopGroupInfo
	11, // 3: srlinux.sdk.NextHopGroupResponse.status:type_name -> srlinux.sdk.SdkMgrStatus
	12, // 4: srlinux.sdk.MplsNextHop.ip_nexthop:type_name -> srlinux.sdk.IpAddressPb
	13, // 5: srlinux.sdk.MplsNextHop.label_stack:type_name -> srlinux.sdk.MplsLabel
	0,  // 6: srlinux.sdk.NextHop.resolve_to:type_name -> srlinux.sdk.NextHop.ResolveToType
	1,  // 7: srlinux.sdk.NextHop.type:type_name -> srlinux.sdk.NextHop.ResolutionType
	12, // 8: srlinux.sdk.NextHop.ip_nexthop:type_name -> srlinux.sdk.IpAddressPb
	6,  // 9: srlinux.sdk.NextHop.mpls_nexthop:type_name -> srlinux.sdk.MplsNextHop
	7,  // 10: srlinux.sdk.NextHopGroup.next_hop:type_name -> srlinux.sdk.NextHop
	9,  // 11: srlinux.sdk.NextHopGroupInfo.key:type_name -> srlinux.sdk.NextHopGroupKey
	8,  // 12: srlinux.sdk.NextHopGroupInfo.data:type_name -> srlinux.sdk.NextHopGroup
	4,  // 13: srlinux.sdk.SdkMgrNextHopGroupService.NextHopGroupAddOrUpdate:input_type -> srlinux.sdk.NextHopGroupRequest
	2,  // 14: srlinux.sdk.SdkMgrNextHopGroupService.NextHopGroupDelete:input_type -> srlinux.sdk.NextHopGroupDeleteRequest
	14, // 15: srlinux.sdk.SdkMgrNextHopGroupService.SyncStart:input_type -> srlinux.sdk.SyncRequest
	14, // 16: srlinux.sdk.SdkMgrNextHopGroupService.SyncEnd:input_type -> srlinux.sdk.SyncRequest
	5,  // 17: srlinux.sdk.SdkMgrNextHopGroupService.NextHopGroupAddOrUpdate:output_type -> srlinux.sdk.NextHopGroupResponse
	3,  // 18: srlinux.sdk.SdkMgrNextHopGroupService.NextHopGroupDelete:output_type -> srlinux.sdk.NextHopGroupDeleteResponse
	15, // 19: srlinux.sdk.SdkMgrNextHopGroupService.SyncStart:output_type -> srlinux.sdk.SyncResponse
	15, // 20: srlinux.sdk.SdkMgrNextHopGroupService.SyncEnd:output_type -> srlinux.sdk.SyncResponse
	17, // [17:21] is the sub-list for method output_type
	13, // [13:17] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_nexthop_group_service_proto_init() }
func file_nexthop_group_service_proto_init() {
	if File_nexthop_group_service_proto != nil {
		return
	}
	file_sdk_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_nexthop_group_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NextHopGroupDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nexthop_group_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NextHopGroupDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nexthop_group_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NextHopGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nexthop_group_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NextHopGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nexthop_group_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MplsNextHop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nexthop_group_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NextHop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nexthop_group_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NextHopGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nexthop_group_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NextHopGroupKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nexthop_group_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NextHopGroupInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_nexthop_group_service_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*NextHop_IpNexthop)(nil),
		(*NextHop_MplsNexthop)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_nexthop_group_service_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_nexthop_group_service_proto_goTypes,
		DependencyIndexes: file_nexthop_group_service_proto_depIdxs,
		EnumInfos:         file_nexthop_group_service_proto_enumTypes,
		MessageInfos:      file_nexthop_group_service_proto_msgTypes,
	}.Build()
	File_nexthop_group_service_proto = out.File
	file_nexthop_group_service_proto_rawDesc = nil
	file_nexthop_group_service_proto_goTypes = nil
	file_nexthop_group_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SdkMgrNextHopGroupServiceClient is the client API for SdkMgrNextHopGroupService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SdkMgrNextHopGroupServiceClient interface {
	/// Add or update one or more next-hop groups.
	NextHopGroupAddOrUpdate(ctx context.Context, in *NextHopGroupRequest, opts ...grpc.CallOption) (*NextHopGroupResponse, error)
	/// Delete next-hop group.
	NextHopGroupDelete(ctx context.Context, in *NextHopGroupDeleteRequest, opts ...grpc.CallOption) (*NextHopGroupDeleteResponse, error)
	/// Synchronization start to open synchronization operation.
	SyncStart(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncResponse, error)
	/// Synchronization end to close synchronization operation.
	SyncEnd(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncResponse, error)
}

type sdkMgrNextHopGroupServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSdkMgrNextHopGroupServiceClient(cc grpc.ClientConnInterface) SdkMgrNextHopGroupServiceClient {
	return &sdkMgrNextHopGroupServiceClient{cc}
}

func (c *sdkMgrNextHopGroupServiceClient) NextHopGroupAddOrUpdate(ctx context.Context, in *NextHopGroupRequest, opts ...grpc.CallOption) (*NextHopGroupResponse, error) {
	out := new(NextHopGroupResponse)
	err := c.cc.Invoke(ctx, "/srlinux.sdk.SdkMgrNextHopGroupService/NextHopGroupAddOrUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sdkMgrNextHopGroupServiceClient) NextHopGroupDelete(ctx context.Context, in *NextHopGroupDeleteRequest, opts ...grpc.CallOption) (*NextHopGroupDeleteResponse, error) {
	out := new(NextHopGroupDeleteResponse)
	err := c.cc.Invoke(ctx, "/srlinux.sdk.SdkMgrNextHopGroupService/NextHopGroupDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sdkMgrNextHopGroupServiceClient) SyncStart(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncResponse, error) {
	out := new(SyncResponse)
	err := c.cc.Invoke(ctx, "/srlinux.sdk.SdkMgrNextHopGroupService/SyncStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sdkMgrNextHopGroupServiceClient) SyncEnd(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncResponse, error) {
	out := new(SyncResponse)
	err := c.cc.Invoke(ctx, "/srlinux.sdk.SdkMgrNextHopGroupService/SyncEnd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SdkMgrNextHopGroupServiceServer is the server API for SdkMgrNextHopGroupService service.
type SdkMgrNextHopGroupServiceServer interface {
	/// Add or update one or more next-hop groups.
	NextHopGroupAddOrUpdate(context.Context, *NextHopGroupRequest) (*NextHopGroupResponse, error)
	/// Delete next-hop group.
	NextHopGroupDelete(context.Context, *NextHopGroupDeleteRequest) (*NextHopGroupDeleteResponse, error)
	/// Synchronization start to open synchronization operation.
	SyncStart(context.Context, *SyncRequest) (*SyncResponse, error)
	/// Synchronization end to close synchronization operation.
	SyncEnd(context.Context, *SyncRequest) (*SyncResponse, error)
}

// UnimplementedSdkMgrNextHopGroupServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSdkMgrNextHopGroupServiceServer struct {
}

func (*UnimplementedSdkMgrNextHopGroupServiceServer) NextHopGroupAddOrUpdate(context.Context, *NextHopGroupRequest) (*NextHopGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NextHopGroupAddOrUpdate not implemented")
}
func (*UnimplementedSdkMgrNextHopGroupServiceServer) NextHopGroupDelete(context.Context, *NextHopGroupDeleteRequest) (*NextHopGroupDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NextHopGroupDelete not implemented")
}
func (*UnimplementedSdkMgrNextHopGroupServiceServer) SyncStart(context.Context, *SyncRequest) (*SyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncStart not implemented")
}
func (*UnimplementedSdkMgrNextHopGroupServiceServer) SyncEnd(context.Context, *SyncRequest) (*SyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncEnd not implemented")
}

func RegisterSdkMgrNextHopGroupServiceServer(s *grpc.Server, srv SdkMgrNextHopGroupServiceServer) {
	s.RegisterService(&_SdkMgrNextHopGroupService_serviceDesc, srv)
}

func _SdkMgrNextHopGroupService_NextHopGroupAddOrUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NextHopGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdkMgrNextHopGroupServiceServer).NextHopGroupAddOrUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/srlinux.sdk.SdkMgrNextHopGroupService/NextHopGroupAddOrUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdkMgrNextHopGroupServiceServer).NextHopGroupAddOrUpdate(ctx, req.(*NextHopGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SdkMgrNextHopGroupService_NextHopGroupDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NextHopGroupDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdkMgrNextHopGroupServiceServer).NextHopGroupDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/srlinux.sdk.SdkMgrNextHopGroupService/NextHopGroupDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdkMgrNextHopGroupServiceServer).NextHopGroupDelete(ctx, req.(*NextHopGroupDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SdkMgrNextHopGroupService_SyncStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdkMgrNextHopGroupServiceServer).SyncStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/srlinux.sdk.SdkMgrNextHopGroupService/SyncStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdkMgrNextHopGroupServiceServer).SyncStart(ctx, req.(*SyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SdkMgrNextHopGroupService_SyncEnd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SdkMgrNextHopGroupServiceServer).SyncEnd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/srlinux.sdk.SdkMgrNextHopGroupService/SyncEnd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SdkMgrNextHopGroupServiceServer).SyncEnd(ctx, req.(*SyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SdkMgrNextHopGroupService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "srlinux.sdk.SdkMgrNextHopGroupService",
	HandlerType: (*SdkMgrNextHopGroupServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NextHopGroupAddOrUpdate",
			Handler:    _SdkMgrNextHopGroupService_NextHopGroupAddOrUpdate_Handler,
		},
		{
			MethodName: "NextHopGroupDelete",
			Handler:    _SdkMgrNextHopGroupService_NextHopGroupDelete_Handler,
		},
		{
			MethodName: "SyncStart",
			Handler:    _SdkMgrNextHopGroupService_SyncStart_Handler,
		},
		{
			MethodName: "SyncEnd",
			Handler:    _SdkMgrNextHopGroupService_SyncEnd_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nexthop_group_service.proto",
}
